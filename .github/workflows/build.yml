name: Build WoL Server for ARM and x64

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

env:
  CFLAGS: "-std=c99 -O2 -static -Wall -Wextra"

jobs:
  build-linux-x64:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install native compiler
      run: |
        sudo apt update
        sudo apt install -y gcc-multilib

    - name: Build for Linux x86_64
      run: |
        gcc $CFLAGS -o wol-server-linux-x64 wol_server.c
        strip wol-server-linux-x64
        file wol-server-linux-x64
        ls -lh wol-server-linux-x64

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: linux-x64
        path: wol-server-linux-x64

  build-linux-arm64:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install ARM64 cross-compiler
      run: |
        sudo apt update
        sudo apt install -y gcc-aarch64-linux-gnu

    - name: Build for Linux ARM64
      run: |
        aarch64-linux-gnu-gcc $CFLAGS -o wol-server-linux-arm64 wol_server.c
        aarch64-linux-gnu-strip wol-server-linux-arm64
        file wol-server-linux-arm64
        ls -lh wol-server-linux-arm64

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: linux-arm64
        path: wol-server-linux-arm64

  build-linux-armv7:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install ARMv7 cross-compiler
      run: |
        sudo apt update
        sudo apt install -y gcc-arm-linux-gnueabihf

    - name: Build for Linux ARMv7
      run: |
        arm-linux-gnueabihf-gcc $CFLAGS -o wol-server-linux-armv7 wol_server.c
        arm-linux-gnueabihf-strip wol-server-linux-armv7
        file wol-server-linux-armv7
        ls -lh wol-server-linux-armv7

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: linux-armv7
        path: wol-server-linux-armv7

  create-release:
    needs: [build-linux-x64, build-linux-arm64, build-linux-armv7]
    runs-on: ubuntu-latest
   # if: github.event_name == 'release'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create release package
      run: |
        mkdir -p release
        # 复制所有二进制文件到release目录
        find ./artifacts -name "wol-server-*" -exec cp {} ./release/ \;
        
        # 创建校验和文件
        cd ./release
        sha256sum wol-server-* > SHA256SUMS.txt
        
        # 显示文件信息
        echo "=== Release Files ==="
        ls -la
        echo "=== Checksums ==="
        cat SHA256SUMS.txt
        
        # 显示二进制信息
        echo "=== Binary Info ==="
        for bin in wol-server-*; do
          if [ -f "$bin" ] && [ "$bin" != "SHA256SUMS.txt" ]; then
            echo "=== $bin ==="
            file "$bin"
            echo "Size: $(du -h "$bin" | cut -f1)"
            echo ""
          fi
        done
        
    - name: Commit and push out files
      run: |
        # 创建wol目录
        mkdir -p wol
        
        # 复制并重命名所有架构的二进制文件到wol目录
        #cp ./artifacts/linux-x64/wol-server-linux-x64 wol/wol-linux-x64
        cp ./artifacts/linux-arm64/wol-server-linux-arm64 wol/wol-linux-arm64
        #cp ./artifacts/linux-armv7/wol-server-linux-armv7 wol/wol-linux-armv7
        
        # 设置文件可执行权限
        chmod +x wol/wol-*
        
        # 配置git
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # 添加所有wol目录下的文件
        git add wol/
        
        # 提交更改
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-update: Build latest binaries for multiple architectures"
          git push
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create tar.gz archive
        run: |
          # 使用 commit SHA 前7位作为文件名
          SHORT_SHA="${GITHUB_SHA:0:7}"
          tar -czf "build_${SHORT_SHA}.tar.gz" wol/

    - name: Create and Upload release
        uses: softprops/action-gh-release@v2
        with:
          files: |
          ./release/wol-server-*
          ./release/SHA256SUMS.txt
          tag_name: build-${{ github.sha }}
          name: Build ${{ github.sha }}
          body: "Automatically generated build - Commit: ${{ github.sha }}"
          files: build_*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
