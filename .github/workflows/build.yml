name: Build WoL Server for ARM and x64

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

env:
  CFLAGS: "-std=c99 -O2 -static -Wall -Wextra"

jobs:
  build-linux-x64:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install native compiler
      run: |
        sudo apt update
        sudo apt install -y gcc-multilib

    - name: Build for Linux x86_64
      run: |
        gcc $CFLAGS -o wol-server-linux-x64 wol_server.c
        strip wol-server-linux-x64
        file wol-server-linux-x64
        ls -lh wol-server-linux-x64

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: linux-x64
        path: wol-server-linux-x64

  build-linux-arm64:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install ARM64 cross-compiler
      run: |
        sudo apt update
        sudo apt install -y gcc-aarch64-linux-gnu

    - name: Build for Linux ARM64
      run: |
        aarch64-linux-gnu-gcc $CFLAGS -o wol-server-linux-arm64 wol_server.c
        aarch64-linux-gnu-strip wol-server-linux-arm64
        file wol-server-linux-arm64
        ls -lh wol-server-linux-arm64

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: linux-arm64
        path: wol-server-linux-arm64

  build-linux-armv7:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install ARMv7 cross-compiler
      run: |
        sudo apt update
        sudo apt install -y gcc-arm-linux-gnueabihf

    - name: Build for Linux ARMv7
      run: |
        arm-linux-gnueabihf-gcc $CFLAGS -o wol-server-linux-armv7 wol_server.c
        arm-linux-gnueabihf-strip wol-server-linux-armv7
        file wol-server-linux-armv7
        ls -lh wol-server-linux-armv7

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: linux-armv7
        path: wol-server-linux-armv7

  create-release:
    needs: [build-linux-x64, build-linux-arm64, build-linux-armv7]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create release package
      run: |
        mkdir -p release
        # 复制所有二进制文件到release目录
        find ./artifacts -name "wol-server-*" -exec cp {} ./release/ \;
        
        # 创建校验和文件
        cd ./release
        sha256sum wol-server-* > SHA256SUMS.txt
        
        # 显示文件信息
        echo "=== Release Files ==="
        ls -la
        echo "=== Checksums ==="
        cat SHA256SUMS.txt
        
        # 显示二进制信息
        echo "=== Binary Info ==="
        for bin in wol-server-*; do
          if [ -f "$bin" ] && [ "$bin" != "SHA256SUMS.txt" ]; then
            echo "=== $bin ==="
            file "$bin"
            echo "Size: $(du -h "$bin" | cut -f1)"
            echo ""
          fi
        done

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./release/wol-server-*
          ./release/SHA256SUMS.txt
